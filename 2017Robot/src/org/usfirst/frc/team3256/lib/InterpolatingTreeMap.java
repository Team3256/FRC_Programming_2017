package org.usfirst.frc.team3256.lib;

import java.util.Map;
import java.util.TreeMap;

public class InterpolatingTreeMap<K extends InverseInterpolatable<K>, V extends Interpolatable<V>> extends TreeMap<K, V> {

	//Generated by eclipse
	private static final long serialVersionUID = 5085082226488853162L;

	private int maxSize;
	
	public InterpolatingTreeMap(int maxSize){
		this.maxSize = maxSize;
	}
	
	@Override
	public V put(K key, V value){
		//make sure we are within size
		if (maxSize > 0 && maxSize <= size()){
			remove(firstKey());
		}
		return super.put(key, value);
	}
	
	public V getInterpolatedValue(K key){
		V value = get(key);
		if (value != null) return value;
		//do interpolation
		K upperBound = ceilingKey(key);
		K lowerBound = floorKey(key);
		if (upperBound == null && lowerBound == null) return null;
		else if (upperBound == null) return get(lowerBound);
		else if (lowerBound == null) return get(upperBound);
		
		V upperValue = get(upperBound);
		V lowerValue = get(lowerBound);
		
		return lowerValue.interpolate(upperValue, lowerBound.inverseInterpolate(upperBound, key));
	}
	
	public void print(){
		for(Map.Entry<K, V> entry : super.entrySet()){
			K key = entry.getKey();
			V value = entry.getValue();
			System.out.println("Key: " + key + "\tValue: " + value);
		}
	}
}
